diff --git a/Makefile.am b/Makefile.am
index b6db339..6abc534 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -39,7 +39,7 @@ memhog_SOURCES = memhog.c util.c
 memhog_LDADD = libnuma.la
 
 libnuma_la_SOURCES = libnuma.c syscall.c distance.c affinity.c affinity.h sysfs.c sysfs.h rtnetlink.c rtnetlink.h versions.ldscript
-libnuma_la_LDFLAGS = -version-info 1:0:0 -Wl,--version-script,$(srcdir)/versions.ldscript -Wl,-init,numa_init -Wl,-fini,numa_fini
+libnuma_la_LDFLAGS = -version-info 1:0:0 -Wl,--version-script,$(srcdir)/versions.ldscript -Wl,-init,numa_init -Wl,-fini,numa_fini -ldl
 
 check_PROGRAMS = \
 	test/distance \
diff --git a/distance.c b/distance.c
index 52b13b7..5a4f6b7 100644
--- a/distance.c
+++ b/distance.c
@@ -22,78 +22,29 @@
 #include <errno.h>
 #include "numa.h"
 #include "numaint.h"
+#include "numaif.h"
 
 static int distance_numnodes;
 static int *distance_table;
 
-static void parse_numbers(char *s, int *iptr)
-{
-	int i, d, j;
-	char *end;
-	int maxnode = numa_max_node();
-	int numnodes = 0;
-
-	for (i = 0; i <= maxnode; i++)
-		if (numa_bitmask_isbitset(numa_nodes_ptr, i))
-			numnodes++;
-
-	for (i = 0, j = 0; i <= maxnode; i++, j++) {
-		d = strtoul(s, &end, 0);
-		/* Skip unavailable nodes */
-		while (j<=maxnode && !numa_bitmask_isbitset(numa_nodes_ptr, j))
-			j++;
-		if (s == end)
-			break;
-		*(iptr+j) = d;
-		s = end;
-	}
-}
-
 static int read_distance_table(void)
 {
-	int nd, len;
-	char *line = NULL;
-	size_t linelen = 0;
-	int maxnode = numa_max_node() + 1;
-	int *table = NULL;
-	int err = -1;
-
-	for (nd = 0;; nd++) {
-		char fn[100];
-		FILE *dfh;
-		sprintf(fn, "/sys/devices/system/node/node%d/distance", nd);
-		dfh = fopen(fn, "r");
-		if (!dfh) {
-			if (errno == ENOENT)
-				err = 0;
-			if (!err && nd<maxnode)
-				continue;
-			else
-				break;
-		}
-		len = getdelim(&line, &linelen, '\n', dfh);
-		fclose(dfh);
-		if (len <= 0)
-			break;
+	int err = 0;
+	int maxnode = XEN_NUM_NODES;
+	int *table = calloc(maxnode * maxnode, sizeof(int));
 
-		if (!table) {
-			table = calloc(maxnode * maxnode, sizeof(int));
-			if (!table) {
-				errno = ENOMEM;
-				break;
-			}
-		}
+	if (table)
+		err = get_numa_info(NUMA_DISTANCE, table);
+	else
+		err = ENOMEM;
 
-		parse_numbers(line, table + nd * maxnode);
-	}
-	free(line);
 	if (err)  {
 		numa_warn(W_distance,
-			  "Cannot parse distance information in sysfs: %s",
-			  strerror(errno));
+			  "Cannot get distance information (err=%d)", err);
 		free(table);
 		return err;
 	}
+
 	/* Update the global table pointer.  Race window here with
 	   other threads, but in the worst case we leak one distance
 	   array one time, which is tolerable. This avoids a
@@ -104,7 +55,7 @@ static int read_distance_table(void)
 	}
 	distance_numnodes = maxnode;
 	distance_table = table;
-	return 0;		
+	return 0;
 }
 
 int numa_distance(int a, int b)
diff --git a/libnuma.c b/libnuma.c
index 371c5a8..6074cf9 100644
--- a/libnuma.c
+++ b/libnuma.c
@@ -27,6 +27,7 @@
 #include <errno.h>
 #include <stdarg.h>
 #include <ctype.h>
+#include <dlfcn.h>
 
 #include <sys/mman.h>
 #include <limits.h>
@@ -57,8 +58,6 @@ struct bitmask *numa_possible_cpus_ptr = NULL;
 
 struct bitmask *numa_nodes_ptr = NULL;
 static struct bitmask *numa_memnode_ptr = NULL;
-static unsigned long *node_cpu_mask_v1[NUMA_NUM_NODES];
-static struct bitmask **node_cpu_mask_v2;
 
 WEAK void numa_error(char *where);
 
@@ -81,6 +80,15 @@ int numa_exit_on_error = 0;
 int numa_exit_on_warn = 0;
 static void set_sizes(void);
 
+static void *vdso_handle;
+typedef unsigned long (*vdso_topology_version_func_t)(void);
+typedef unsigned long (*vdso_node_to_cpus_func_t)(int node);
+typedef unsigned long (*vdso_getmemnodemask_func_t)(void);
+
+static vdso_topology_version_func_t vdso_topology_version;
+static vdso_node_to_cpus_func_t vdso_node_to_cpus;
+static vdso_getmemnodemask_func_t vdso_getmemnodemask;
+
 /*
  * There are two special functions, _init(void) and _fini(void), which
  * are called automatically by the dynamic loader whenever a library is loaded.
@@ -95,6 +103,16 @@ numa_init(void)
 	if (sizes_set)
 		return;
 
+	vdso_handle = dlopen("linux-vdso.so.1", RTLD_LAZY);
+	if (vdso_handle) {
+		vdso_topology_version = (vdso_topology_version_func_t)
+				dlsym(vdso_handle, "get_topology_version");
+		vdso_node_to_cpus = (vdso_node_to_cpus_func_t)
+				dlsym(vdso_handle, "node_to_cpus");
+		vdso_getmemnodemask = (vdso_getmemnodemask_func_t)
+				dlsym(vdso_handle, "getmemnodemask");
+	}
+
 	set_sizes();
 	/* numa_all_nodes should represent existing nodes on this system */
         max = numa_num_configured_nodes();
@@ -118,6 +136,9 @@ numa_fini(void)
 	FREE_AND_ZERO(numa_no_nodes_ptr);
 	FREE_AND_ZERO(numa_memnode_ptr);
 	FREE_AND_ZERO(numa_nodes_ptr);
+
+	if (vdso_handle)
+		dlclose(vdso_handle);
 }
 
 /*
@@ -304,6 +325,18 @@ static void dombind(void *mem, size_t size, int pol, struct bitmask *bmp)
 		numa_error("mbind"); 
 } 
 
+static void getnumamaxnode(int *maxnode)
+{
+	if(get_numa_info(NUMA_MAXNODE, maxnode) < 0)
+		numa_error("get_numa_info");
+}
+
+static void getnumanodemasksz(int *nodemask_sz)
+{
+	if(get_numa_info(NUMA_NODEMASK_SZ, nodemask_sz) < 0)
+		numa_error("get_numa_info");
+}
+
 /* (undocumented) */
 /* gives the wrong answer for hugetlbfs mappings. */
 int numa_pagesize(void)
@@ -324,49 +357,34 @@ make_internal_alias(numa_pagesize);
 static void
 set_configured_nodes(void)
 {
-	DIR *d;
-	struct dirent *de;
-	long long freep;
+	int nd;
+	unsigned long nodemask;
 
 	numa_memnode_ptr = numa_allocate_nodemask();
 	numa_nodes_ptr = numa_allocate_nodemask();
 
-	d = opendir("/sys/devices/system/node");
-	if (!d) {
-		maxconfigurednode = 0;
-	} else {
-		while ((de = readdir(d)) != NULL) {
-			int nd;
-			if (strncmp(de->d_name, "node", 4))
-				continue;
-			nd = strtoul(de->d_name+4, NULL, 0);
+	getnumamaxnode(&maxconfigurednode);
+
+	if (!vdso_getmemnodemask)
+		for (nd = 0; nd <= maxconfigurednode; nd++) {
 			numa_bitmask_setbit(numa_nodes_ptr, nd);
-			if (numa_node_size64(nd, &freep) > 0)
-				numa_bitmask_setbit(numa_memnode_ptr, nd);
-			if (maxconfigurednode < nd)
-				maxconfigurednode = nd;
+			numa_bitmask_setbit(numa_memnode_ptr, nd);
 		}
-		closedir(d);
-	}
-}
+	else {
+		nodemask = vdso_getmemnodemask();
 
-/*
- * Convert the string length of an ascii hex mask to the number
- * of bits represented by that mask.
- */
-static int s2nbits(const char *s)
-{
-	return strlen(s) * 32 / 9;
-}
+		/*
+		 * We have only nodes with memory.
+		 * In other words, numa_nodes_ptr == numa_memnode_ptr.
+		 */
+		*(numa_nodes_ptr->maskp) = nodemask;
+		*(numa_memnode_ptr->maskp) = nodemask;
+	}
 
-/* Is string 'pre' a prefix of string 's'? */
-static int strprefix(const char *s, const char *pre)
-{
-	return strncmp(s, pre, strlen(pre)) == 0;
 }
 
 static const char *mask_size_file = "/proc/self/status";
-static const char *nodemask_prefix = "Mems_allowed:\t";
+
 /*
  * (do this the way Paul Jackson's libcpuset does it)
  * The nodemask values in /proc/self/status are in an
@@ -376,22 +394,8 @@ static const char *nodemask_prefix = "Mems_allowed:\t";
 static void
 set_nodemask_size(void)
 {
-	FILE *fp;
-	char *buf = NULL;
-	size_t bufsize = 0;
-
-	if ((fp = fopen(mask_size_file, "r")) == NULL)
-		goto done;
+	getnumanodemasksz(&nodemask_sz);
 
-	while (getline(&buf, &bufsize, fp) > 0) {
-		if (strprefix(buf, nodemask_prefix)) {
-			nodemask_sz = s2nbits(buf + strlen(nodemask_prefix));
-			break;
-		}
-	}
-	free(buf);
-	fclose(fp);
-done:
 	if (nodemask_sz == 0) {/* fall back on error */
 		int pol;
 		unsigned long *mask = NULL;
@@ -495,10 +499,6 @@ set_task_constraints(void)
 
 		if (strncmp(buffer,"Cpus_allowed:",13) == 0)
 			numproccpu = read_mask(mask, numa_all_cpus_ptr);
-
-		if (strncmp(buffer,"Mems_allowed:",13) == 0) {
-			numprocnode = read_mask(mask, numa_all_nodes_ptr);
-		}
 	}
 	fclose(f);
 	free(buffer);
@@ -528,9 +528,13 @@ set_task_constraints(void)
 	}
 
 	if (numprocnode <= 0) {
+		numprocnode = 0;
+		/* numa_all_nodes_ptr will have all available mem nodes set. */
 		for (i = 0; i <= maxconfigurednode; i++)
-			numa_bitmask_setbit(numa_all_nodes_ptr, i);
-		numprocnode = maxconfigurednode + 1;
+			if (numa_bitmask_isbitset(numa_memnode_ptr, i)) {
+				numprocnode++;
+				numa_bitmask_setbit(numa_all_nodes_ptr, i);
+			}
 	}
 
 	return;
@@ -1242,26 +1246,14 @@ numa_parse_bitmap_v2(char *line, struct bitmask *mask)
 }
 __asm__(".symver numa_parse_bitmap_v2,numa_parse_bitmap@@libnuma_1.2");
 
-void
-static init_node_cpu_mask_v2(void)
-{
-	int nnodes = numa_max_possible_node_v2_int() + 1;
-	node_cpu_mask_v2 = calloc (nnodes, sizeof(struct bitmask *));
-}
-
 /* This would be better with some locking, but I don't want to make libnuma
    dependent on pthreads right now. The races are relatively harmless. */
 int
 numa_node_to_cpus_v1(int node, unsigned long *buffer, int bufferlen)
 {
 	int err = 0;
-	char fn[64];
-	FILE *f;
-	char *line = NULL;
-	size_t len = 0;
-	struct bitmask bitmask;
 	int buflen_needed;
-	unsigned long *mask;
+	struct bitmask bitmask;
 	int ncpus = numa_num_possible_cpus();
 	int maxnode = numa_max_node_int();
 
@@ -1270,54 +1262,18 @@ numa_node_to_cpus_v1(int node, unsigned long *buffer, int bufferlen)
 		errno = ERANGE;
 		return -1;
 	}
-	if (bufferlen > buflen_needed)
-		memset(buffer, 0, bufferlen);
-	if (node_cpu_mask_v1[node]) {
-		memcpy(buffer, node_cpu_mask_v1[node], buflen_needed);
-		return 0;
-	}
-
-	mask = malloc(buflen_needed);
-	if (!mask)
-		mask = (unsigned long *)buffer;
-	memset(mask, 0, buflen_needed);
 
-	sprintf(fn, "/sys/devices/system/node/node%d/cpumap", node);
-	f = fopen(fn, "r");
-	if (!f || getdelim(&line, &len, '\n', f) < 1) {
-		if (numa_bitmask_isbitset(numa_nodes_ptr, node)) {
-			numa_warn(W_nosysfs2,
-			   "/sys not mounted or invalid. Assuming one node: %s",
-				  strerror(errno));
-			numa_warn(W_nosysfs2,
-			   "(cannot open or correctly parse %s)", fn);
-		}
-		bitmask.maskp = (unsigned long *)mask;
-		bitmask.size  = buflen_needed * 8;
-		numa_bitmask_setall(&bitmask);
-		err = -1;
-	}
-	if (f)
-		fclose(f);
+	memset(buffer, 0, bufferlen);
 
-	if (line && (numa_parse_bitmap_v1(line, mask, ncpus) < 0)) {
+	if (!vdso_node_to_cpus) {
 		numa_warn(W_cpumap, "Cannot parse cpumap. Assuming one node");
-		bitmask.maskp = (unsigned long *)mask;
+		bitmask.maskp = buffer;
 		bitmask.size  = buflen_needed * 8;
 		numa_bitmask_setall(&bitmask);
 		err = -1;
-	}
-
-	free(line);
-	memcpy(buffer, mask, buflen_needed);
+	} else
+		*buffer = vdso_node_to_cpus(node);
 
-	/* slightly racy, see above */
-	if (node_cpu_mask_v1[node]) {
-		if (mask != buffer)
-			free(mask);
-	} else {
-		node_cpu_mask_v1[node] = mask;
-	}
 	return err;
 }
 __asm__(".symver numa_node_to_cpus_v1,numa_node_to_cpus@libnuma_1.1");
@@ -1335,13 +1291,6 @@ numa_node_to_cpus_v2(int node, struct bitmask *buffer)
 {
 	int err = 0;
 	int nnodes = numa_max_node();
-	char fn[64], *line = NULL;
-	FILE *f; 
-	size_t len = 0; 
-	struct bitmask *mask;
-
-	if (!node_cpu_mask_v2)
-		init_node_cpu_mask_v2();
 
 	if (node > nnodes) {
 		errno = ERANGE;
@@ -1349,60 +1298,14 @@ numa_node_to_cpus_v2(int node, struct bitmask *buffer)
 	}
 	numa_bitmask_clearall(buffer);
 
-	if (node_cpu_mask_v2[node]) {
-		/* have already constructed a mask for this node */
-		if (buffer->size < node_cpu_mask_v2[node]->size) {
-			errno = EINVAL;
-			numa_error("map size mismatch");
-			return -1;
-		}
-		copy_bitmask_to_bitmask(node_cpu_mask_v2[node], buffer);
-		return 0;
-	}
-
-	/* need a new mask for this node */
-	mask = numa_allocate_cpumask();
-
-	/* this is a kernel cpumask_t (see node_read_cpumap()) */
-	sprintf(fn, "/sys/devices/system/node/node%d/cpumap", node); 
-	f = fopen(fn, "r"); 
-	if (!f || getdelim(&line, &len, '\n', f) < 1) { 
-		if (numa_bitmask_isbitset(numa_nodes_ptr, node)) {
-			numa_warn(W_nosysfs2,
-			   "/sys not mounted or invalid. Assuming one node: %s",
-				  strerror(errno)); 
-			numa_warn(W_nosysfs2,
-			   "(cannot open or correctly parse %s)", fn);
-		}
-		numa_bitmask_setall(mask);
-		err = -1;
-	} 
-	if (f)
-		fclose(f);
-
-	if (line && (numa_parse_bitmap_v2(line, mask) < 0)) {
+	if (!vdso_node_to_cpus) {
 		numa_warn(W_cpumap, "Cannot parse cpumap. Assuming one node");
-		numa_bitmask_setall(mask);
+		numa_bitmask_setall(buffer);
 		err = -1;
-	}
+	} else
+		*(buffer->maskp) = vdso_node_to_cpus(node);
 
-	free(line);
-	copy_bitmask_to_bitmask(mask, buffer);
-
-	/* slightly racy, see above */ 
-	/* save the mask we created */
-	if (node_cpu_mask_v2[node]) {
-		/* how could this be? */
-		if (mask != buffer)
-			numa_bitmask_free(mask);
-	} else {
-		/* we don't want to cache faulty result */
-		if (!err)
-			node_cpu_mask_v2[node] = mask;
-		else
-			numa_bitmask_free(mask);
-	}
-	return err; 
+	return err;
 }
 __asm__(".symver numa_node_to_cpus_v2,numa_node_to_cpus@@libnuma_1.2");
 
@@ -2038,3 +1941,8 @@ struct bitmask * numa_parse_cpustring_all(const char *s)
 {
 	return __numa_parse_cpustring(s, numa_possible_cpus_ptr);
 }
+
+unsigned long numa_topology_version(void)
+{
+	return vdso_topology_version ? vdso_topology_version() : 0UL;
+}
diff --git a/numa.h b/numa.h
index 01b3165..da7882f 100644
--- a/numa.h
+++ b/numa.h
@@ -33,6 +33,8 @@
 #define NUMA_NUM_NODES  2048
 #endif
 
+#define XEN_NUM_NODES	16
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -326,6 +328,8 @@ struct bitmask *numa_parse_cpustring(const char *);
  * dependency */
 struct bitmask *numa_parse_cpustring_all(const char *);
 
+unsigned long numa_topology_version(void);
+
 /*
  * The following functions are for source code compatibility
  * with releases prior to version 2.
diff --git a/numaif.h b/numaif.h
index 2c9f214..9a97c25 100644
--- a/numaif.h
+++ b/numaif.h
@@ -8,6 +8,11 @@ extern "C" {
 /* Kernel interface for NUMA API */
 
 /* System calls */
+#define NUMA_NODEMASK_SZ 0
+#define NUMA_MAXNODE     1
+#define NUMA_DISTANCE		2
+extern long get_numa_info(int numa_info, void *buff);
+
 extern long get_mempolicy(int *mode, unsigned long *nmask,
 			unsigned long maxnode, void *addr, unsigned flags);
 extern long mbind(void *start, unsigned long len, int mode,
diff --git a/syscall.c b/syscall.c
index d3fe644..f632d09 100644
--- a/syscall.c
+++ b/syscall.c
@@ -25,7 +25,7 @@
 
 #if !defined(__NR_mbind) || !defined(__NR_set_mempolicy) || \
     !defined(__NR_get_mempolicy) || !defined(__NR_migrate_pages) || \
-    !defined(__NR_move_pages)
+    !defined(__NR_move_pages) || !defined(__NR_get_numa_info)
 
 #if defined(__x86_64__)
 
@@ -39,6 +39,7 @@
 #define __NR_get_mempolicy 239
 #define __NR_migrate_pages 256
 #define __NR_move_pages 279
+#define __NR_get_numa_info 333
 
 #elif defined(__ia64__)
 #define __NR_sched_setaffinity    1231
@@ -185,6 +186,11 @@ long syscall6(long call, long a, long b, long c, long d, long e, long f)
 #define syscall6 syscall
 #endif
 
+long WEAK get_numa_info(int numa_info, void *buff)
+{
+	return syscall(__NR_get_numa_info, numa_info, buff);
+}
+
 long WEAK get_mempolicy(int *policy, unsigned long *nmask,
 				unsigned long maxnode, void *addr,
 				unsigned flags)
diff --git a/versions.ldscript b/versions.ldscript
index eaddc7e..35f60c4 100644
--- a/versions.ldscript
+++ b/versions.ldscript
@@ -60,6 +60,7 @@ libnuma_1.1 {
     numa_tonodemask_memory;
     numa_warn;
     numa_exit_on_warn;
+    numa_topology_version;
   local:
     *;
 };
@@ -149,6 +150,7 @@ libnuma_1.2 {
     numa_tonode_memory;
     numa_tonodemask_memory;
     numa_warn;
+    numa_topology_version;
   local:
     *;
 } libnuma_1.1;
